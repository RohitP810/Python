# -*- coding: utf-8 -*-
"""12001550-checkpoint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BsGhMzKRSbhfX-zAkSYMJUa8DTasjjQc

# PROBLEM STATEMENT 1
"""

import pandas as pd 
import matplotlib.pyplot as plt 
import statistics as s
import numpy as np
csv = 'D:\covid_19_india_Sept20.csv'
df=pd.read_csv(csv) 
b=[] 
b=df['State/UnionTerritory']=="Uttar Pradesh" 
df[b].to_csv('D:\covid_19_Uttar-pradesh2.csv')
csv = 'D:\covid_19_Uttar-pradesh2.csv'
df=pd.read_csv(csv)
print(df.head()) 
print(df.tail())

"""#  PROBLEM STATEMENT 2"""

i=0
j=0
a=[0]*30
c=[0]*30
d=[0]*30
co=[0]*30
for i in range(30):  
    for j in range(i+1):
        c[i]=df['Cured'][j]+c[i]
        d[i]=df['Deaths'][j]+d[i]
        co[i]=df['Confirmed'][j]+co[i]
df['Total no.of cured']=c
df['Total no.of deaths']=d
df['Total no.of confirmed']=co
i=0
for i in range(30):
    a[i]=df['Total no.of confirmed'][i]-df['Total no.of cured'][i]-df['Total no.of deaths'][i]
df['Active']=a
print(df)

"""# PROBLEM STATEMENT 3 """

plt.title('Day wise plot for Active patients')
plt.xlabel('no.of patient')
plt.ylabel('dates')
plt.plot(df['Active'],df['Date'],color='r',label='active')
plt.show()
plt.xlabel('no.of patient')
plt.ylabel('dates')
plt.title('Day wise plot for Total no.of confirmed')
plt.plot(df['Total no.of confirmed'],df['Date'],color='b',label='confirmed')
plt.show()
plt.xlabel('no.of patient')
plt.ylabel('dates')
plt.title('Day wise plot for Total no.of cured')
plt.plot(df['Total no.of cured'],df['Date'],color='g',label='cured')
plt.show()
plt.xlabel('no.of patient')
plt.ylabel('dates')
plt.title('Day wise plot for Total no.of deaths')
plt.plot(df['Total no.of deaths'],df['Date'],color='k',label='deaths')
plt.show()
plt.xlabel('no.of patient')
plt.ylabel('dates')
plt.title('Day wise plot for whole data')
plt.plot(df['Active'],df['Date'],color='r',label='active')
plt.plot(df['Total no.of confirmed'],df['Date'],color='b',label='confirmed')
plt.plot(df['Total no.of cured'],df['Date'],color='g',label='cured')
plt.plot(df['Total no.of deaths'],df['Date'],color='k',label='deaths')
plt.legend()
plt.show()

"""# PROBLEM STATEMENT 4"""

a=max(df['Confirmed'][0:7])

b=max(df['Confirmed'][7:14])

c=max(df['Confirmed'][14:21])

d=max(df['Confirmed'][21:28])         

e=max(df['Confirmed'][28:])

plt.title('highest no. of confirmed cases per week')
plt.xlabel('week')
plt.ylabel('No.of patients')
plt.bar(1,a,0.35,color='r')
plt.bar(2,b,0.35,color='b')
plt.bar(3,c,0.35,color='g')
plt.bar(4,d,0.35,color='y')
plt.bar(5,e,0.35,color='c')
plt.show()




a=(df['Confirmed'][0:7].mean())

b=(df['Confirmed'][7:14].mean())

c=(df['Confirmed'][14:21].mean())

d=(df['Confirmed'][21:28].mean())         

e=(df['Confirmed'][28:].mean())

plt.title('avg no. of confirmed cases per week')
plt.xlabel('week')
plt.ylabel('No.of patients')
plt.bar(1,a,0.35,color='r')
plt.bar(2,b,0.35,color='b')
plt.bar(3,c,0.35,color='g')
plt.bar(4,d,0.35,color='y')
plt.bar(5,e,0.35,color='c')
plt.show()


a=min(df['Deaths'][0:7])

b=max(df['Deaths'][7:14])

c=max(df['Deaths'][14:21])

d=max(df['Deaths'][21:28])         

e=max(df['Deaths'][28:])

plt.title('least no. of death per week')
plt.xlabel('week')
plt.ylabel('No.of patients')
plt.bar(1,a,0.35,color='r')
plt.bar(2,b,0.35,color='b')
plt.bar(3,c,0.35,color='g')
plt.bar(4,d,0.35,color='y')
plt.bar(5,e,0.35,color='c')
plt.show()

"""# PROBLEM STATEMENT 5"""

def lmnmx(a=[]):
    max=[]
    min=[]
    n=30
    if(a[0]>a[1]):
        max.append(0)
    else:
        min.append(0)
    
    for i in range(1,29):
        if(a[i-1]>a[i]<a[i+1]):
            min.append(i)
        elif(a[i-1]<a[i]>a[i+1]):
            max.append(i)

    if(a[29]>a[28]):
        max.append(n-1)
    else:
        min.append(n-1)

    
    if(len(max)>0):
        print("number of peaks: ",len(max))
    else:
        print("there is no peak!!!")
    
    if(len(min)>0):
        print("number of dips: ",len(max))
    else:
        print("there is no dip!!!")
    
    print("corresponding date of peak: ",df['Date'][max])
    print("corresponding no.of patients on peak: ",a[max])
    print("corresponding date of dip: ",df['Date'][min])
    print("corresponding no.of patients on dip: ",a[min])
a=df['Confirmed']
lmnmx(a)

"""# PROBLEM STATEMENT 6"""

b=df['Confirmed']
max=[]
min=[]
c=[3,6,9,12,15,18,21,24,27]
for i in c:
    if (b[i-1]>b[i]<b[i+1]):
        b.pop(i)
for i in range(1,29):
        if(b[i-1]>b[i]<b[i+1]):
            min.append(i)
        elif(b[i-1]<b[i]>b[i+1]):
            max.append(i)
if b[0]<b[1]:
    b.pop(0)
else:
    max.append(0)
if b[29]<b[28]:
    b.pop(29)
else:
    max.append(29)

if(len(max)>0):
        print("number of peaks: ",len(max))
else:
        print("there is no peak!!!")
    
if(len(min)>0):
        print("number of dips: ",len(max))
else:
        print("there is no dip!!!")
        
print("corresponding date of peak: ",df['Date'][max])
print("corresponding no.of patients on peak: ",b[max])
print("corresponding date of dip: ",df['Date'][min])
print("corresponding no.of patients on dip: ",b[min])

"""# PROBLEM STATEMENT 7"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn import linear_model
# %matplotlib inline
reg=linear_model.LinearRegression().fit(df[['Sno']],df[['Confirmed']])
a=1049
b=[0]*92
for i in range(0,92):
    if i==0:
            b[i]=a+35
    else:
        b[i]=b[i-1]+35
x_new=np.array([b[9]]).reshape(1,-1)
p=reg.predict(x_new)
print('Predicted value of new confirmed cases on 10/10/20 : ',int(p))

x_new=np.array([b[19]]).reshape(1,-1)
p=reg.predict(x_new)
print('Predicted value of new confirmed cases on 20/10/20 : ',int(p))

x_new=np.array([b[70]]).reshape(1,-1)
p=reg.predict(x_new)
print('Predicted value of new confirmed cases on 10/12/20 : ',int(p))